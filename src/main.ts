import './style.css'

// Configuration
const COUNTRIES = {
  US: {
    id: 'usButton',
    className: 'us',
    name: 'United States'
  },
  CANADA: {
    id: 'canadaButton',
    className: 'canada',
    name: 'Canada'
  },
  SRI_LANKA: {
    id: 'lankaButton',
    className: 'lanka',
    name: 'Sri Lanka'
  }
} as const;

const STYLES = {
  SELECTED_FILL: '#728E5D',
  SELECTED_STROKE: '#ffffff',
  SELECTED_STROKE_WIDTH: '3.26',
  DEFAULT_FILL: '#CFF1B2',
  ANIMATION_DURATION: 1000,
  PADDING: 50
} as const;

const BUTTON_CLASSES = {
  DEFAULT: 'm-2.5 px-5 py-2.5 text-base bg-white text-black border-2 border-black rounded cursor-pointer hover:bg-gray-100 active:bg-gray-200 transition-colors',
  ACTIVE: 'm-2.5 px-5 py-2.5 text-base bg-gray-200 text-black border-2 border-black rounded cursor-pointer hover:bg-gray-100 active:bg-gray-300 transition-colors'
} as const;

// Utility functions
function getElement<T extends Element>(selector: string): T | null {
  return document.querySelector(selector) as T | null;
}

function getElementById<T extends Element>(id: string): T | null {
  return document.getElementById(id) as T | null;
}

// Animation utilities
function easeInOutCubic(t: number): number {
  return t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;
}

function animateViewBox(
  svg: SVGElement,
  targetViewBox: [number, number, number, number],
  duration: number = STYLES.ANIMATION_DURATION
): void {
  const currentViewBox = svg.getAttribute('viewBox')?.split(' ').map(Number) || [0, 0, 700, 700];
  const startTime = performance.now();

  function animate(currentTime: number): void {
    const elapsed = currentTime - startTime;
    const progress = Math.min(elapsed / duration, 1);
    const easedProgress = easeInOutCubic(progress);

    const [currentX, currentY, currentWidth, currentHeight] = currentViewBox;
    const [targetX, targetY, targetWidth, targetHeight] = targetViewBox;

    const newX = currentX + (targetX - currentX) * easedProgress;
    const newY = currentY + (targetY - currentY) * easedProgress;
    const newWidth = currentWidth + (targetWidth - currentWidth) * easedProgress;
    const newHeight = currentHeight + (targetHeight - currentHeight) * easedProgress;

    svg.setAttribute('viewBox', `${newX} ${newY} ${newWidth} ${newHeight}`);

    if (progress < 1) {
      requestAnimationFrame(animate);
    }
  }

  requestAnimationFrame(animate);
}

// Country selection functions
function resetAllCountries(): void {
  Object.values(COUNTRIES).forEach(country => {
    const path = getElement<SVGPathElement>(`.${country.className}`);
    if (path) {
      path.setAttribute('fill', STYLES.DEFAULT_FILL);
      path.removeAttribute('stroke');
      path.removeAttribute('stroke-width');
    }
  });
}

function selectCountry(countryKey: keyof typeof COUNTRIES): void {
  const country = COUNTRIES[countryKey];
  const svg = getElementById<SVGElement>('mapSvg');
  const path = getElement<SVGPathElement>(`.${country.className}`);

  if (!svg || !path) return;

  // Reset all countries first
  resetAllCountries();

  // Get bounding box and calculate viewBox
  const bbox = path.getBBox();
  const centerX = bbox.x + bbox.width / 2;
  const centerY = bbox.y + bbox.height / 2;
  const viewBoxWidth = bbox.width + STYLES.PADDING * 2;
  const viewBoxHeight = bbox.height + STYLES.PADDING * 2;
  const viewBoxX = centerX - viewBoxWidth / 2;
  const viewBoxY = centerY - viewBoxHeight / 2;

  // Animate to new viewBox
  animateViewBox(svg, [viewBoxX, viewBoxY, viewBoxWidth, viewBoxHeight]);

  // Apply selected styling
  path.setAttribute('fill', STYLES.SELECTED_FILL);
  path.setAttribute('stroke', STYLES.SELECTED_STROKE);
  path.setAttribute('stroke-width', STYLES.SELECTED_STROKE_WIDTH);

  // Update button states
  updateButtonStates(country.id);
}

function updateButtonStates(activeButtonId: string): void {
  Object.values(COUNTRIES).forEach(country => {
    const button = getElementById<HTMLButtonElement>(country.id);
    if (button) {
      button.className = country.id === activeButtonId 
        ? BUTTON_CLASSES.ACTIVE 
        : BUTTON_CLASSES.DEFAULT;
    }
  });
}

// Event handlers
function createCountryButtonHandler(countryKey: keyof typeof COUNTRIES) {
  return () => selectCountry(countryKey);
}

// Initialize the application
function initializeApp(): void {
  // Set up HTML structure
  document.querySelector<HTMLDivElement>('#app')!.innerHTML = `
    <div>
      <button id="usButton" class="${BUTTON_CLASSES.DEFAULT}">United States</button>
      <button id="canadaButton" class="${BUTTON_CLASSES.DEFAULT}">Canada</button>
      <button id="lankaButton" class="${BUTTON_CLASSES.ACTIVE}">Sri Lanka</button>
      <div class="flex w-fit border-1 border-[#f3f3f3] rounded-lg">
        <svg id="mapSvg" width="700px" height="700px" viewBox="0 0 700 700" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path class="canada" d="M901.576 422.259L897.158 415.072L902.981 398.102L899.768 394.508L892.339 396.504L890.13 393.31L879.087 402.693L872.661 412.476L867.039 418.266L862.019 420.263L858.606 420.862L856.397 423.856H837.723L822.061 424.056L816.64 426.252L802.986 435.037V434.837L801.179 434.038L797.163 435.835L793.347 438.431L789.733 436.235L780.296 437.832L772.465 439.629L768.65 441.226L764.032 445.418L767.646 446.816L771.059 446.017H771.662L771.059 449.811L761.421 451.208L755.799 452.805L752.386 454.802L747.165 453.604L743.952 454.203L738.129 457.797L728.893 461.79L723.471 460.991L727.487 456.599L734.916 449.611L743.149 445.418L745.358 441.825L747.165 435.835L754.795 428.847L756.602 420.862L758.811 428.648L766.441 430.445L771.26 426.252L768.449 416.669L766.642 412.676L758.61 410.28L750.98 408.883H743.149L736.322 407.285L735.519 404.49L732.708 406.287L730.298 405.888L734.113 401.695L730.499 400.098L734.314 395.306L731.905 391.713L735.318 388.119L724.877 386.322L724.676 379.135L723.07 377.538L716.443 377.138L708.211 374.743L705.199 376.34L701.585 379.334L694.958 381.331L688.734 386.322L677.891 382.928L669.056 384.525L661.225 380.732L651.988 378.736L645.362 377.937L643.354 375.94L645.161 369.152H641.748L639.138 373.944H618.657H584.522H550.788H520.87H491.152H461.636H431.316H421.677H392.161H363.849H362.443L351.6 361.765L348.388 356.375L334.332 351.184L336.942 340.203L344.171 332.816L335.938 327.426L342.163 317.643L337.946 308.858L342.966 302.47L353.207 296.68L359.632 289.093L350.396 281.506L353.207 267.731L355.415 259.345L352.203 253.955L350.596 249.163L351.801 242.974L338.75 246.767L323.489 253.356L322.887 245.769L321.883 240.578L316.261 237.384L307.827 236.985L379.31 171.699L428.705 130.971L440.753 133.566L447.379 138.757L454.809 139.755L467.459 135.363L481.514 131.969L492.156 133.167L510.027 128.575L526.492 125.98L526.894 130.372L535.929 127.776L543.76 122.785L547.977 123.983L550.788 133.566L569.864 126.179L562.033 134.365L574.08 132.568L580.506 129.573L589.742 130.172L597.573 134.564L612.633 138.557L622.07 140.354L630.905 139.755L636.728 145.346L619.661 150.736L632.511 152.932L656.406 151.734L665.241 149.738L668.052 156.326L682.308 150.936L678.092 146.144L687.127 142.55L697.569 141.951L705.4 140.953L709.616 143.549L712.628 149.339L722.668 148.54L733.31 153.531L747.767 151.734L759.815 151.934L764.634 145.146L773.67 143.349L783.509 146.943L774.875 157.324L787.324 148.54L793.749 148.939L806.6 137.959L803.387 131.37L797.564 126.978L808.608 115.198L825.073 107.612L834.109 109.409L838.125 114.001L838.928 125.98L827.282 131.17L840.735 133.367L831.9 144.347L849.771 135.962L854.188 142.95L845.554 150.936L848.164 158.323L862.822 150.536L875.874 140.953L885.311 129.174L896.355 129.973L907.198 131.57L914.426 136.96L911.013 142.351L900.772 148.141L902.58 153.93L897.76 159.321L875.874 167.107L862.822 168.904L856.397 165.51L849.771 171.1L834.912 180.484L828.888 185.475L813.427 193.062L800.375 193.86L790.135 198.652L784.312 206.239L772.867 207.636L755.397 217.02L736.523 229.997L726.483 239.181L716.644 252.956L728.692 254.953L725.68 265.934L724.073 275.118L738.732 272.722L752.787 277.913L759.413 282.505L762.827 288.095L772.666 291.489L779.894 296.48L795.155 297.279L804.793 298.477L797.564 308.858L794.151 321.037L794.351 334.813L803.186 346.592L812.624 342.599L823.868 329.821L828.486 310.655L825.073 304.266L843.145 298.477L858.204 290.091L867.842 281.706L871.256 273.72L870.453 263.538L864.027 254.554L881.898 242.175L883.906 231.594L891.737 213.626L899.367 210.83L912.82 214.025L921.253 215.223L930.289 212.028L936.514 216.021L943.742 222.809L944.144 227.202L959.605 228.2L954.384 237.983L949.766 252.757L957.396 254.753L960.609 261.741L977.074 255.153L992.134 241.976L1000.57 236.585L1002.78 247.167L1008 262.14L1012.01 276.515L1005.19 284.102L1014.82 290.89L1020.65 297.678L1034.5 300.872L1039.32 304.666V315.047L1046.15 316.645L1048.36 321.237L1044.34 335.012L1035.71 339.604L1027.27 343.997L1009.6 348.389L993.74 358.371L976.472 360.567L956.192 357.772H941.534L930.892 358.571L919.446 367.555L904.588 373.145L884.307 389.517L868.445 401.096L877.882 399.1L899.768 382.529L924.466 372.147L939.727 370.949L946.353 377.138L934.104 385.524L932.899 398.9L933.1 408.483L944.345 414.672L961.613 412.876L976.07 398.7L974.062 407.884L979.082 412.476L964.223 420.662L939.325 428.249L927.679 433.24L913.222 442.424L905.792 441.425L908.804 430.844L929.687 420.263L913.423 420.662L901.576 422.259Z" fill="#CFF1B2"/>
          <path class="us" d="M688.734 386.321L676.486 390.314L667.049 395.305L657.812 400.696L656.808 402.493L668.253 399.897L672.47 404.09L681.707 401.095L691.546 396.903L702.388 392.71L696.164 399.298L701.184 400.896L706.204 405.687L716.444 402.892L726.685 401.894L727.287 405.488L730.299 405.887L732.708 406.286L735.72 411.277L726.283 412.475H726.082L718.653 411.078L709.617 413.474L702.188 414.671L692.75 422.857L686.726 427.449L687.53 428.847L698.573 420.661H699.979L690.542 430.444L684.719 439.228L679.699 446.416L678.494 452.605L676.887 455.599L675.683 458.994L675.884 465.582L676.486 466.58L680.1 466.381L683.313 464.983L686.124 463.386L692.75 457.197L696.365 448.811L696.164 441.025L698.975 435.635L704.196 429.445L708.412 425.053L713.834 422.058L713.03 426.251L717.448 420.062L720.058 418.864L723.472 414.072L731.102 416.668L736.724 421.459L735.118 427.249L731.905 433.039L724.275 438.03L723.472 441.225H725.48L734.114 435.834L737.327 437.032L736.323 444.419L734.917 449.61L727.488 456.598L723.472 460.99L718.05 465.782L723.472 468.377L728.492 469.176L736.523 467.379L743.953 463.985L749.977 462.188L759.213 458.594L770.859 451.008L771.06 449.81L771.662 446.016L777.084 444.419L784.915 445.018L792.947 446.016L802.183 441.824L803.388 436.832L802.986 435.036L816.64 426.251L822.062 424.055L837.724 423.855H856.398L858.606 420.861L862.02 420.262L867.04 418.265L872.662 412.475L879.087 402.692L890.131 393.309L892.34 396.503L899.769 394.507L902.982 398.101L897.159 415.071L901.576 422.258L901.978 426.451L889.127 432.44L877.079 436.832L865.032 440.626L857 448.212L854.39 451.008L851.98 457.796L853.386 464.384L857.602 464.783L858.004 460.191L860.213 462.987L858.205 466.58L850.574 468.577L845.555 468.377L837.121 470.573L832.503 471.172L826.278 471.771L816.239 475.564L832.503 473.169L834.712 475.564L818.849 479.358H812.223L813.026 477.761L808.809 481.354L811.62 481.953L806.601 491.137L795.959 500.92L796.159 497.526L793.951 496.927L791.541 493.733V500.72L793.549 502.916L792.344 507.708L787.525 512.699L778.489 522.881L777.686 522.482L783.509 513.697L779.493 508.906L781.501 498.125L777.686 503.715V511.901L771.261 509.904L777.285 513.897L774.273 526.076L777.084 527.074V531.466L775.076 544.244L765.839 553.627L753.591 557.421L744.756 565.007L739.134 565.806L732.307 570.597L729.696 574.79L715.842 583.175L708.211 589.365L701.184 596.951L697.369 605.935V614.92L698.573 625.9L701.585 634.885L700.581 640.475L703.192 655.249L701.184 664.033L699.979 669.025L695.963 676.811L692.349 678.408L687.128 676.811L686.325 671.221L682.711 668.226L678.695 657.245L675.482 647.462L674.679 642.471L678.695 633.886L677.088 626.899L670.864 616.118L667.049 614.121L654.8 620.11L652.993 619.312L648.977 613.322L642.953 610.128L630.102 611.925L620.866 610.328L612.232 611.326L607.212 613.322L608.417 616.716L607.011 621.907L608.617 624.503L606.208 626.1L602.594 624.303L597.975 626.699L590.144 626.3L583.518 619.512L573.679 621.109L566.451 618.114L559.423 619.112L549.383 622.107L537.135 631.49L524.886 637.081L517.457 643.07L513.642 648.86L511.634 657.844L510.831 663.834L512.035 668.226L507.618 668.625L500.389 665.83L492.558 661.837L490.751 655.848L490.35 646.863L485.531 639.676L483.723 632.089L480.511 623.305L474.085 618.114L465.05 618.513L455.411 628.496L447.38 624.702L442.761 620.909L441.958 613.722L440.352 607.133L435.533 601.543L431.316 597.35L428.706 592.759H409.831L408.225 598.149H399.591H377.905L356.018 589.165L341.963 582.976L343.77 580.38L329.513 581.778L316.863 582.776L317.466 576.387L313.249 569L308.832 567.403L309.032 563.809L303.209 563.011L300.8 559.617L291.162 558.419L289.355 556.223L290.961 549.235L285.941 536.457L284.937 518.689L286.744 515.694L284.134 511.501L281.122 500.72L284.736 490.338L282.929 483.351L290.76 472.769L296.382 461.988L298.591 452.205L309.635 440.227L317.667 428.847L325.698 417.467L334.333 400.496L337.947 389.915L338.75 384.125L341.561 381.53L353.207 385.922L351.199 397.701L355.617 394.307L360.637 384.125L363.849 373.943H392.161H421.678H431.316H461.636H491.153H520.87H550.789H584.522H618.657H639.138L641.748 369.151H645.162L643.355 375.939L645.363 377.936L651.989 378.735L661.226 380.731L669.057 384.524L677.891 382.927L688.734 386.321Z" fill="#CFF1B2" stroke="#CFF1B2" stroke-width="6.58075" stroke-linecap="round" stroke-linejoin="round" mask="url(#path-238-inside-1_3095_877)"/>
          <path class="lanka" xmlns="http://www.w3.org/2000/svg" d="M2508.73 920.382L2499.1 923.376L2493.27 913.194L2490.46 894.827L2494.48 874.063L2502.71 881.051L2508.33 890.035L2514.56 903.411L2513.35 916.788L2508.73 920.382Z" fill="#CFF1B2"/>
        </svg>
      </div>
    </div>
  `;

  // Add event listeners
  getElementById<HTMLButtonElement>('usButton')?.addEventListener('click', createCountryButtonHandler('US'));
  getElementById<HTMLButtonElement>('canadaButton')?.addEventListener('click', createCountryButtonHandler('CANADA'));
  getElementById<HTMLButtonElement>('lankaButton')?.addEventListener('click', createCountryButtonHandler('SRI_LANKA'));

  // Initialize with Sri Lanka selected by default
  selectCountry('SRI_LANKA');
}

// Start the application
initializeApp();
